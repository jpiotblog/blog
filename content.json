{"meta":{"title":"Japan IoT Support Blog","subtitle":"","description":"","author":"jpiotblog","url":"https://jpiotblog.github.io","root":"/blog/"},"pages":[],"posts":[{"title":"UWF 有効化環境で Windows Update 実行時に Out Of Memory が発生する","slug":"UWF-out-of-memory","date":"2020-08-21T03:00:00.000Z","updated":"2020-08-21T08:22:39.441Z","comments":true,"path":"2020/08/21/UWF-out-of-memory/","link":"","permalink":"https://jpiotblog.github.io/2020/08/21/UWF-out-of-memory/","excerpt":"UWF 有効化環境で LCU (累積更新プログラム) の適用時に Out Of Memory で発生する事象について紹介します。","text":"UWF 有効化環境で LCU (累積更新プログラム) の適用時に Out Of Memory で発生する事象について紹介します。 適用環境 Windows 10 Enterprise 2016 LTSB Windows 10 IoT Enterprise 2016 LTSB 物理メモリが 4 GB UWF でシステム使用領域を保護している 事象UWF を有効化している環境で Windows Update を適用する方法は、主に以下 2 通りになります。 uwfmgr.exe filter disable を実行して OS 再起動し、手動で Windows Update を実行する。 uwfmgr.exe servicing enable を実行してUWF サービスモードを有効化する。 この時、上述の適用環境に該当するマシンでは Out Of Memory が発生し、更新が失敗する事象が確認されています。 原因Windows 10 Enterprise 2016 LTSB および Windows 10 IoT Enterprise 2016 LTSB は、リリースから長期間が経過していることから、LCU (累積更新プログラム) が持つメタ データのサイズが非常に大きくなっており、処理の過程でメモリ不足 (Out Of Memory) が発生することが知られております。このような問題の一般的な対処策として、ページング ファイルを有効化する方法があります。しかし、UWF を有効化したタイミングでページング ファイルは無効化されるため、UWF の利用開始がこの問題を発生させるトリガーとなる場合がございます。 対処方法以下いずれかの方法を実施することで、事象を回避できる可能性があります。 RAM を増設する ドライブを追加しページング ファイルの出力先に設定する UWF フィルターの無効化後、ページング ファイルを設定してから Windows Update を実行する 3 点目の運用回避方法につきまして、以下に具体的な手順を紹介させていただきます。 運用手順 (1) 以下のコマンドを実行して、UWF フィルターを無効化します (※ コマンド実行後、OS が再起動します)。 12uwfmgr.exe filter disableshutdown &#x2F;r &#x2F;t 0 (2) 以下のコマンドを実行して、ページング ファイルを設定します (※ コマンド実行後、OS が再起動します)。GUI で実行する場合は こちら を参照ください。 12reg add &quot;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Memory Management&quot; &#x2F;v PagingFiles &#x2F;t REG_MULTI_SZ &#x2F;d &quot;c:\\pagefile.sys 4396 4396&quot; &#x2F;fshutdown &#x2F;r &#x2F;t 0 (3) 手動での Windows Update を実行します。 (4) 以下のコマンドを実行して、ページング ファイルの設定を削除します (※ コマンド実行後、OS が再起動します)。GUI で実行する場合は こちら を参照ください。 12reg add &quot;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Memory Management&quot; &#x2F;v PagingFiles &#x2F;t REG_MULTI_SZ &#x2F;d &quot;&quot; &#x2F;fshutdown &#x2F;r &#x2F;t 0 (5) 以下のコマンドを実行して、UWF フィルターを有効化します (※ コマンド実行後、OS が再起動します)。 12uwfmgr.exe filter enableshutdown &#x2F;r &#x2F;t 0 補足情報上述の手順 (2) および (4) は GUI からも実行頂けます。レジストリを直接操作することに制限がございます場合、以下の手順を参考に実施ください。 (2) の手順を GUI で実行する方法(2-1) Ctrl + R キーを押下し、[名前] 欄に sysdm.cpl と入力して [OK] ボタンをクリックします。(2-2) [システムのプロパティ] ダイアログの [詳細設定] タブ - [設定] ボタンをクリックします。(2-3) [パフォーマンス オプション] ダイアログの [詳細設定] タブ - [変更] ボタンをクリックします。(2-4) [仮想メモリ] ダイアログの [すべてのドライブのページング ファイルのサイズを自動的に管理する] のチェックを外し、[カスタム サイズ] にチェックを入れ、初期サイズと最大サイズに 4396 を入力、[設定] ボタンをクリックし、[OK] ボタンをクリックします。 (2-5) OS の再起動を促すダイアログがポップアップした場合、指示に従い再起動します。表示されなかった場合には、手動で OS を再起動します。 (4) の手順を GUI で実行する方法(4-1) Ctrl + R キーを押下し、[名前] 欄に sysdm.cpl と入力して [OK] ボタンをクリックします。(4-2) [システムのプロパティ] ダイアログの [詳細設定] タブ - [設定] ボタンをクリックします。(4-3) [パフォーマンス オプション] ダイアログの [詳細設定] タブ - [変更] ボタンをクリックします。(4-4) [仮想メモリ] ダイアログの [ページング ファイルなし] にチェックを入れ、[設定] ボタンをクリックし、[OK] ボタンをクリックします。 (4-5) 続行するか確認のダイアログがポップアップした場合、[はい] を選択します。 (4-6) OS の再起動を促すダイアログがポップアップした場合、指示に従い再起動します。表示されなかった場合には、手動で OS を再起動します。 変更履歴2020/08/01 created by Mochizuki2020/08/21 modified by Mochizuki","categories":[{"name":"Unified Write Filter","slug":"Unified-Write-Filter","permalink":"https://jpiotblog.github.io/categories/Unified-Write-Filter/"}],"tags":[{"name":"Out Of Memory","slug":"Out-Of-Memory","permalink":"https://jpiotblog.github.io/tags/Out-Of-Memory/"},{"name":"UWF servicing mode","slug":"UWF-servicing-mode","permalink":"https://jpiotblog.github.io/tags/UWF-servicing-mode/"}]},{"title":"Windows Embedded 8 Standard で Windows Update がエラー 8007000E で失敗する (KB4571736 関連)","slug":"WE8S-error-8007000E","date":"2020-08-13T03:00:00.000Z","updated":"2020-08-21T08:22:39.457Z","comments":true,"path":"2020/08/13/WE8S-error-8007000E/","link":"","permalink":"https://jpiotblog.github.io/2020/08/13/WE8S-error-8007000E/","excerpt":"Windows Embedded 8 Standard において、Windows Update がエラー 8007000E で失敗する現象の対処方法をご紹介します。","text":"Windows Embedded 8 Standard において、Windows Update がエラー 8007000E で失敗する現象の対処方法をご紹介します。 Windows Embedded 8 Standard において、Windows Update がエラー 8007000E で失敗する現象が報告されております。この現象の修正を 2020 年 8 月のロールアップ更新プログラム (KB4571736) でリリースいたしました。 August 11, 2020-KB4571736 (Monthly Rollup) 当該現象が確認されている端末にて、KB4571736 (または以降のロールアップ更新プログラム) を適用することで改善が見込めます。すでに現象が発生している環境では、上記更新プログラムを Windows Update カタログ サイトから手動でダウンロードし、適用ください。 Windows Update カタログ (KB4571736) 修正される現象について、改めて以下にご紹介させていただきます。 KB4571736 適用によって修正される現象Windows Embedded 8 Standard で Windows Update の 「更新プログラムの確認」 をクリックすると、以下の様に 8007000E エラー (E_OUTOFMEMORY、メモリ不足) で失敗します。 この現象は、どの環境でも再現するわけではありません。また、KB4571736 がリリースされるまでに Windows Update で配布される修正プログラムの重複の除外により、配布される容量の削減も行われ、再現率も低下しております。しかしながら、弊社で以下の条件の Hyper-V 仮想マシンで環境構築すれば、x86 でも x64 でも再現することを確認しました。 世代の指定で 「第 1 世代」 を選択 メモリの割り当てで 「2048 MB」 を指定 Windows Embedded 8 Standard のテンプレートに 「ThinClient」 を選択 以上の内容がお役に立てば幸いです。 変更履歴2020/08/13 created by Tsuda","categories":[{"name":"Windows Embedded 8 Standard","slug":"Windows-Embedded-8-Standard","permalink":"https://jpiotblog.github.io/categories/Windows-Embedded-8-Standard/"}],"tags":[{"name":"Windows Update","slug":"Windows-Update","permalink":"https://jpiotblog.github.io/tags/Windows-Update/"},{"name":"8007000E","slug":"8007000E","permalink":"https://jpiotblog.github.io/tags/8007000E/"}]},{"title":"Shell Launcher でシャットダウンをキャンセルする方法について","slug":"Cancel-shutdown-with-Shell-Launcher","date":"2020-08-11T03:00:00.000Z","updated":"2020-08-21T08:22:39.362Z","comments":true,"path":"2020/08/11/Cancel-shutdown-with-Shell-Launcher/","link":"","permalink":"https://jpiotblog.github.io/2020/08/11/Cancel-shutdown-with-Shell-Launcher/","excerpt":"Shell Launcher でシャットダウンをキャンセルする方法についてご紹介します。","text":"Shell Launcher でシャットダウンをキャンセルする方法についてご紹介します。 Shell Launcher でカスタムシェルアプリケーションを実行している時に、シャットダウンの通知を受け取って、未保存のデータを保存してからシャットダウンしたい場合があると思います。 例えば、Explorer.exe がシェルとして実行されている時は、実行中のウィンドウ アプリケーションで、以下の様に予め ShutdownBlockReasonCreate() を実行しておき、シャットダウン時に WM_QUERYENDSESSION のウィンドウメッセージを受け取って FALSE を返せば、ユーザーがシャットダウンをキャンセルするかどうかを選ぶことができます。 1234567891011121314151617181920212223242526272829303132333435363738394041424344LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)&#123; switch (message) &#123; case WM_COMMAND: &#123; int wmId = LOWORD(wParam); // 選択されたメニューの解析: switch (wmId) &#123; case IDM_ABOUT: DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About); break; case IDM_EXIT: DestroyWindow(hWnd); break; default: return DefWindowProc(hWnd, message, wParam, lParam); &#125; &#125; break; case WM_PAINT: &#123; PAINTSTRUCT ps; HDC hdc = BeginPaint(hWnd, &amp;ps); // TODO: HDC を使用する描画コードをここに追加してください... EndPaint(hWnd, &amp;ps); &#125; break; case WM_CREATE: ShutdownBlockReasonCreate(hWnd, L\"Don't do it!\"); break; case WM_DESTROY: ShutdownBlockReasonDestroy(hWnd); PostQuitMessage(0); break; case WM_QUERYENDSESSION: return FALSE; break; default: return DefWindowProc(hWnd, message, wParam, lParam); &#125; return 0;&#125; 誠に恐れ入りますが、Shell Launcher V1 では、制限として、これと同じことができる方法はありません。 Shell Launcher You cannot prevent the system from shutting down. For Shell Launcher V1 and V2, you cannot block the session ending by returning FALSE upon receiving the WM_QUERYENDSESSION message in a graphical application or returning FALSE in the handler routine that is added through the SetConsoleCtrlHandler function in a console application. 上記ドキュメントでは Shell Launcher V2 でも方法がない旨の記載となっておりますが、現時点では、例外として、Shell Launcher V2 を用いた以下の手順であれば、同じことができることを確認していますので、その詳細をご紹介していきます。 今回は、Windows 10 IoT Enterprise LTSC 2019 x64 を使用します。Shell Launcher V2 は Windows 10 バージョン 1809 以降でサポートされており、バージョン 1809 では KB4551853 をインストールすることでご利用いただけます。 手順(1) Shell Launcher の機能を有効にした Windows 10 IoT Enterprise LTSC 2019 で、以下の KB を適用します。 2020 年 5 月 12 日 - KB4551853 (OS ビルド 17763.1217) インターネット接続がある場合は、上記を Windows Update で適用いただくだけで、以下の KB が適用されますが、インターネット接続がない場合には、上記を適用する前に、Microsoft Update カタログから適用ください。 https://www.catalog.update.microsoft.com/Search.aspx?q=KB4549947 (2) ShellLauncherBridgeWmiHelpers.ps1 を以下のサイトからコピーし、 Windows 10 IoT Enterprise LTSC 2019 の PC 上の任意のフォルダ (ここでは例として C:\\test とします) に置きます。 Shell Launcher V2 Bridge WMI Sample scripts (3) PsTools.zip を以下からダウンロードし、(2) のフォルダに置き、解凍します。 PsExec v2.2 (4) (UWP ではない) Windows フォームアプリとして、第二引数にメッセージ付きの ShutdownBlockReasonCreate() と SetProcessShutdownParameters() の第一引数に 0x500 を入れ、WM_QUERYENDSESSION は FALSE で返します。ここでは、例として以下のコードとしています。これをビルドしたモジュールを 2. のフォルダに置きます。 123456789101112131415161718192021222324252627282930313233343536373839404142434445LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)&#123; switch (message) &#123; case WM_COMMAND: &#123; int wmId = LOWORD(wParam); // 選択されたメニューの解析: switch (wmId) &#123; case IDM_ABOUT: DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About); break; case IDM_EXIT: DestroyWindow(hWnd); break; default: return DefWindowProc(hWnd, message, wParam, lParam); &#125; &#125; break; case WM_PAINT: &#123; PAINTSTRUCT ps; HDC hdc = BeginPaint(hWnd, &amp;ps); // TODO: HDC を使用する描画コードをここに追加してください EndPaint(hWnd, &amp;ps); &#125; break; case WM_CREATE: SetProcessShutdownParameters(0x500, 0); ShutdownBlockReasonCreate(hWnd, L\"Don't do it!\"); break; case WM_DESTROY: ShutdownBlockReasonDestroy(hWnd); PostQuitMessage(0); break; case WM_QUERYENDSESSION: return FALSE; break; default: return DefWindowProc(hWnd, message, wParam, lParam); &#125; return 0;&#125; (5) ShellLauncher.xml の例として、以下の様に記載したものを (2) のフォルダに置きます。Shell= の後にカスタムシェルアプリケーションへのフルパスを記載しています。DefaultAction には、Action=”DoNothing” としています。 123456789101112&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;ShellLauncherConfiguration xmlns=\"http://schemas.microsoft.com/ShellLauncher/2018/Configuration\" xmlns:v2=\"http://schemas.microsoft.com/ShellLauncher/2019/Configuration\"&gt; &lt;Profiles&gt; &lt;DefaultProfile&gt; &lt;Shell Shell=\"C:\\test\\SetProcessShutdownParameters.exe\"&gt; &lt;DefaultAction Action=\"DoNothing\"/&gt; &lt;/Shell&gt; &lt;/DefaultProfile&gt; &lt;/Profiles&gt; &lt;Configs/&gt; &lt;/ShellLauncherConfiguration&gt; (6) Windows 10 IoT Enterprise LTSC 2019 の PC 上で、管理者権限のコマンドプロンプトから、以下を実行します。これは、システムアカウントで powershell.exe を実行するために必須のため、省略しないようご注意ください。 psexec.exe -i -s powershell.exe (7) (6) で起動した PowerShell 上で、cd コマンドで 2. のフォルダ (例 C:\\test) に移動し、「Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope LocalMachine」などで .ps1 ファイルを実行可能にしたら、以下のコマンドを入力します。 . .\\ShellLauncherBridgeWmiHelpers.ps1Set-ShellLauncherBridgeWmi -FilePath .\\ShellLauncher.xml (8) OS を再起動したら、カスタムシェルアプリケーションが起動してきますので、シャットダウンしますと以下の様に表示されます。Shell Launcher V2 では、カスタムシェルアプリケーションのウィンドウは、必ず全画面表示になりますので、ここでのシャットダウンは、タスクマネージャーの [ファイル]-[新しいタスクの実行] でコマンドプロンプトを起動し、shutdown /s /t 0 を実行しています。 参考ドキュメント Use Shell Launcher to create a Windows 10 kiosk ShutdownBlockReasonCreate function WM_QUERYENDSESSION message SetProcessShutdownParameters function 以上の内容がお役に立てば幸いです。 変更履歴2020/08/11 created by Tsuda","categories":[{"name":"Shell Launcher","slug":"Shell-Launcher","permalink":"https://jpiotblog.github.io/categories/Shell-Launcher/"}],"tags":[{"name":"シャットダウン","slug":"シャットダウン","permalink":"https://jpiotblog.github.io/tags/%E3%82%B7%E3%83%A3%E3%83%83%E3%83%88%E3%83%80%E3%82%A6%E3%83%B3/"}]},{"title":"UWF 機能を有効化した環境で Sysprep を用いたマスター イメージを作成する場合の留意点について","slug":"UWF-sysprep","date":"2020-07-27T08:00:00.000Z","updated":"2020-08-21T08:22:39.446Z","comments":true,"path":"2020/07/27/UWF-sysprep/","link":"","permalink":"https://jpiotblog.github.io/2020/07/27/UWF-sysprep/","excerpt":"UWF 機能を有効化した環境で Sysprep を用いたマスター イメージを作成する場合の留意点をご紹介いたします。","text":"UWF 機能を有効化した環境で Sysprep を用いたマスター イメージを作成する場合の留意点をご紹介いたします。 統合書き込みフィルター (UWF) は、Windows 10 のオプション機能になります。端末のキッティングにあたり UWF 機能を有効化した状態でマスター イメージを作成する場合、まずは以下のサイトの情報に従い UWF 機能をインストールします。 統合書き込みフィルター (UWF) 機能の使用 (抜粋) 1. 次の機能をインストールします。 a. [スタート] をクリックし、「 Windows の機能の有効化または無効化」と入力します。 b. [Windows の機能] ウィンドウで、 [デバイスロックダウン] ノードを展開し、[統合書き込みフィルター &gt; OK] をオンにします。 : ※ 一部省略 c. [閉じる] をクリックして、 [Windows の機能] ウィンドウを閉じます。 インストールが完了した状態は、UWF フィルターは無効化されています。この状態で sysprep を実行し、マスター イメージを作成ください。既に UWF のフィルターを有効化していた場合、後述の留意事項をご確認ください。 留意事項についてUWF フィルターを有効化した状態や、ボリューム保護の設定をした後でマスター イメージを作成した場合、UWF の設定が正常に引き継がれません。以下の留意点をご確認いただき、それぞれ設定の無効化を実施ください。 UWF フィルターを有効化した環境の場合、sysprep を実行してもイメージの一般化は行われません。UWF フィルターを有効化した環境の場合、以下のコマンドを実行後、OS を再起動して UWF フィルターを無効化ください。 1uwfmgr filter disable ドライブの書き込み保護の設定は、イメージの展開後の環境では有効に動作いたしません。これは、UWF が保持している保護対象ボリュームの GUID が、イメージ展開後の環境で変わってしまうためです。もし C ドライブの保護設定を行っていた場合、以下のコマンドを実行後に OS を再起動し、保護を解除ください。 1uwfmgr volume unprotect C: ※ UWF の除外パスやオーバーレイの設定につきましては、イメージ展開後に問題が発生したという報告はございません。しかしながら、設定するパスや展開後の環境に依存して問題が発生する可能性がございますので、基本的にイメージ展開後に実行することを推奨いたします。 変更履歴2020/07/27 created by Mochizuki","categories":[{"name":"Unified Write Filter","slug":"Unified-Write-Filter","permalink":"https://jpiotblog.github.io/categories/Unified-Write-Filter/"}],"tags":[{"name":"Sysprep","slug":"Sysprep","permalink":"https://jpiotblog.github.io/tags/Sysprep/"}]},{"title":"uwfmgr.exe ツールの Commit/Commit-Delete コマンドについて","slug":"UWF-commit","date":"2020-06-29T08:00:00.000Z","updated":"2020-08-21T08:22:39.386Z","comments":true,"path":"2020/06/29/UWF-commit/","link":"","permalink":"https://jpiotblog.github.io/2020/06/29/UWF-commit/","excerpt":"UWF オーバーレイの保護領域に対して、ファイルやレジストリの変更を反映させる方法についてお纏めします。","text":"UWF オーバーレイの保護領域に対して、ファイルやレジストリの変更を反映させる方法についてお纏めします。 ※ uwfmgr.exe ツールの利用法は、こちら を参照ください。 uwfmgr.exe File Commit/Commit-Delete についてUWF オーバーレイの保護領域に対してファイル操作を行った場合、OS 再起動後にこれらの操作内容がリセットされます。この時、uwfmgr.exe File Commit/Commit-Delete によって、変更内容がリセットされないよう “コミット” することが可能です。コミットしたタイミングの変更内容が実際のシステムに反映されます。 ファイルの作成、変更を反映する場合、uwfmgr.exe file commit を使用します。実行はファイル単位で、正規表現は使用できません。 例 (c:\\temp\\test.txt の変更反映) 1uwfmgr.exe file commit &quot;c:\\temp\\test.txt&quot; ファイルの削除を反映する場合、uwfmgr.exe file commit-delete を使用します。実行はファイル単位ですが、空のフォルダーに対しても使用可能です。正規表現は使用できません。ファイル削除後に実行するのではなく、コマンドを実行によってファイルを削除します。 例 (c:\\temp\\test.txt の削除反映): 1uwfmgr.exe file commit-delete &quot;c:\\temp\\test.txt&quot; 例 (c:\\temp の削除反映 ※ 空のフォルダーである必要があります): 1uwfmgr.exe file commit-delete &quot;c:\\temp&quot; 補足 1:新しくフォルダーを作成し、その配下に作成したファイルに対して uwfmgr file commit を実行した場合、作成したフォルダーを含めてコミットされます。逆に、フォルダー内のファイルを全て uwfmgr file commit-delete で削除後、空のフォルダーを削除する場合には uwfmgr file commit-delete をそのフォルダーに対して実行することでフォルダーの削除がコミットされます。 補足 2:現状、新しく作成したフォルダーのみ (空の状態) をコミットする方法がありません。代替策として、フォルダーの配下に適当なファイルを作成し Commit 実行後、Comite-Delete で削除することでフォルダーのみをコミットしたことと同等の結果を得ることが可能です。 例 (c:\\temp フォルダーのみコミットする場合):1234mkdir c:\\tempecho commit &gt; c:\\temp\\test.txtuwfmgr file commit c:\\temp\\test.txtuwfmgr file commit-delete c:\\temp\\test.txt 2 行目の echo コマンドで commit という文字列を c:\\temp\\test.txt へ標準出力し、ファイルを作成します。3 行目で作成されたファイルをコミットし、4 行目で削除します。 uwfmgr.exe Registry Commit/Commit-Delete についてUWF オーバーレイによってシステムの利用領域を保護している状態でレジストリ キーや値の変更を行った場合、OS 再起動後に変更内容はリセットされます。この時、uwfmgr.exe Registry Commit/Commit-Delete によって、変更内容がリセットされないよう “コミット” することが可能です。コミットしたタイミングの変更内容がシステムに反映されます。 レジストリ キー、値の作成、変更を反映する場合、uwfmgr.exe registry commit を使用します。実行は値単位で、正規表現は使用できません。 例 (HKLM\\SOFTWARE\\test キー配下の値 test の変更反映): 1uwfmgr.exe registry commit &quot;HKLM\\SOFTWARE\\test&quot; test レジストリ キー、値の削除を反映する場合、uwfmgr.exe registry commit-delete を使用します。キーのみを指定して削除を実行することが可能です。レジストリ キー、値を削除後に実行するのではなく、コマンドを実行によって削除します。 例 (HKLM\\Software\\test キー配下の値 test の削除反映): 1uwfmgr.exe registry commit-delete &quot;HKLM\\Software\\test&quot; test 例 (HKLM\\Software\\test キーの削除反映): 1uwfmgr.exe registry commit-delete &quot;HKLM\\Software\\test&quot; 補足:HKLM 以外のレジストリ ハイブ (例えば、HKCR、HKCU など) のキー、サブ キー、値の作成や変更、削除は行えません。また、HKLM 自体や、HKLM\\Software, HKLM\\System, HKLM\\SAM, HKLM\\Security, HKLM\\Components キーを変更対象とすることはできません。これらは仕様上、実行が拒否されます。 変更履歴2020/06/29 created by Mochizuki","categories":[{"name":"Unified Write Filter","slug":"Unified-Write-Filter","permalink":"https://jpiotblog.github.io/categories/Unified-Write-Filter/"}],"tags":[{"name":"uwfmgr.exe","slug":"uwfmgr-exe","permalink":"https://jpiotblog.github.io/tags/uwfmgr-exe/"}]},{"title":"長期間稼働するシステムでの UWF 有効化について","slug":"UWF-longtermup","date":"2020-02-19T15:00:00.000Z","updated":"2020-08-21T08:22:39.422Z","comments":true,"path":"2020/02/20/UWF-longtermup/","link":"","permalink":"https://jpiotblog.github.io/2020/02/20/UWF-longtermup/","excerpt":"長期間稼働するシステムで UWF を有効化する場合の、一般的な留意事項をご紹介します。","text":"長期間稼働するシステムで UWF を有効化する場合の、一般的な留意事項をご紹介します。 UWF を有効化している環境において、オーバーレイ領域が不足するとシステムが動作しなくなるため、定期的にシステムを再起動してオーバーレイ領域をフラッシュする必要があります。 オーバーレイ領域の消費傾向はその環境のご利用方法に依存します。例えば、新しいファイルの作成や更新が頻繁に行われるシステムでは、オーバーレイが比較的早く消費します。逆に、新しいファイルの作成は行われず、限定された動作のみを行うシステムでは消費は少ないことが想定されます。オーバーレイ領域の消費傾向が把握できていないシステムにおきましては、長期間連続稼働 (例: 24 時間 365 日) を要件するシステムでの UWF 利用はお勧めしません。 システムを再起動せず稼働可能な期間を判断するためには、UWF を有効化して模擬運用を実施し、オーバーレイの消費傾向を把握することをお勧めします。運用が周期的に行われる場合、周期の最大期間 (例: 一週間、または一ヶ月など) を目途に模擬運用を継続ください。消費傾向からシステム再起動タイミングを逆算したり、どのような操作が最もオーバーレイを消費しているかを確認して、利用方法の変更やオーバーレイ領域の拡大をご検討ください。 検討方法例: (1) 一週間または一ヶ月などの運用周期となる期間、運用試験を実施し、オーバーレイの消費傾向を把握します。 消費量 / 残容量の確認: 12uwfmgr overlay get-consumption uwfmgr overlay get-availablespace (2) 試験結果を基に、システム再起動間隔でオーバーレイが枯渇しないよう設定値を決定します。 例:オーバーレイ消費傾向: 約 200 MB / 日システム再起動間隔 : 一週間毎 7 日 x 200 MB = 1400 MB / 週、ただし操作によっては消費量が増えることを想定して約 2 倍超の 3 GB = 3072 MB と設定 1uwfmgr overlay set-size 3072 一週間通常使用しても警告を出力しないように 1.5 GB = 1536 MB と設定 1uwfmgr overlay set-warningthreshold 1536 重大エラー表示後 2 日間余裕があるように 2.5 GB = 2560 MB と設定 1uwfmgr overlay set-criticalthreshold 2560 RAM 上に 3072 MB を確保するのが難しい場合は Disk オーバーレイを設定 ※ OS 再起動後、set-size で指定したサイズの隠しファイル C:\\uwfswap.sys が作成されます。 1uwfmgr overlay set-type disk 設定を反映させるため OS を再起動 1shutdown -r -t 0 関連する公開情報をご紹介します。 統合書き込みフィルター (UWF) オーバーレイの位置とサイズ Windows 10 の統合書き込みフィルター機能 (UWF) で、フィルターの除外設定を行ってもオーバーレイのメモリを消費してしまう UWF 有効にしてから 6 ヶ月経過すると一部の通知アイコンが表示されない現象について","categories":[{"name":"Unified Write Filter","slug":"Unified-Write-Filter","permalink":"https://jpiotblog.github.io/categories/Unified-Write-Filter/"}],"tags":[{"name":"オーバーレイ","slug":"オーバーレイ","permalink":"https://jpiotblog.github.io/tags/%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%A4/"}]},{"title":"UWF の除外設定について","slug":"UWF-exclusions","date":"2020-02-18T15:00:00.000Z","updated":"2020-08-21T08:22:39.412Z","comments":true,"path":"2020/02/19/UWF-exclusions/","link":"","permalink":"https://jpiotblog.github.io/2020/02/19/UWF-exclusions/","excerpt":"UWF の除外設定を実施するにあたり、留意いただきたい内容をお纏めいたします。","text":"UWF の除外設定を実施するにあたり、留意いただきたい内容をお纏めいたします。 除外設定に関するお問い合わせについてUWF は、保護対象領域に対する書き込みをオーバーレイ領域でキャッシュし、OS 再起動をトリガーにキャッシュした情報をリセットして、UWF を有効化した時点に戻します。ある製品を動作させようとしたときに、OS 再起動後に情報がリセットされると不都合が発生する場合、除外設定を追加することで期待通りに動作させることができる可能性があります。この時、各製品で必要な除外設定につきましては、各製品サポートよりご案内させていただいております。下記例を参照ください。 質問例 1. Windows Defender に必要な除外設定を教えてほしい -&gt; Windows Defender の製品サポートへお問い合わせください 質問例 2. Wi-Fi の接続情報を OS 起動後も維持したい -&gt; Windows OS の製品サポート (ネットワーク担当) へお問い合わせください 質問例 3. A 社の製品を UWF 有効化した状態で動作させることは可能か -&gt; A 社製品ベンダーへお問い合わせください 除外設定の追加によって何らかの問題が発生した場合、除外対象パスを使用するプロセス側にて調査が必要となる場合がございます。対象の製品サポートへ事例の有無や対処方法についてお問い合わせください。 除外を推奨しないパスについてシステムの起動の初期段階でアクセスするフォルダ (C:\\Windows 配下など) は、他のデータと一貫性を持っているため、一部のフォルダーのみを除外することで問題が発生する場合があります。この一貫性が崩れた場合、システムがハンドルできない問題が発生し 「SYSTEM THREAD EXCEPTION NOT HANDLED」 エラー表示されます。これは、システム内部にて Access violation が発生 (アクセスできる情報としてアクセスしたが、情報が無いか権限が無く失敗) することでシステムの起動が進められなくなるためです。 一般的な除外設定に加えて、除外を推奨しないパスの情報も含まれておりますので、併せてご確認ください。 書き込みフィルターの除外 ! 重要次の除外を追加しないでください。 \\Windows\\System32\\config\\DEFAULT \\Windows\\System32\\config\\SAM \\Windows\\System32\\config\\SECURITY \\Windows\\System32\\config\\SOFTWARE \\Windows\\System32\\config\\SYSTEM \\Users&lt;User Name&gt;\\NTUSER.DAT \\Windows\\BOOTSTAT.DAT \\EFI\\Microsoft\\Boot\\BOOTSTAT.DAT \\Boot\\BOOTSTAT.DAT また、次の項目の除外を追加しないでください。 ボリュームルート。 例: C: または d: システムボリューム上のフォルダー。\\Windows システムボリューム上のフォルダー。\\Windows\\System32 システムボリューム上のフォルダー。\\Windows\\System32\\Drivers ページングファイル。 これらのアイテムの除外の追加はサポートされていないため、予期しない結果が生じる可能性があります。 これらの場所にあるサブディレクトリとファイルを除外するのは問題ありません。 ! 重要次の除外を追加しないでください。 HKLM\\SECURITY\\Policy\\Secrets$MACHINE.ACC 統合書き込みフィルター (UWF) 機能 ! 注意この問題を回避するには、日付と時刻の設定 (“%windir%\\bootstat.dat”) を保持するファイルを書き込みフィルターの除外に追加しないでください。 これにより、Stop エラー 0x7E (SYSTEM_THREAD_EXCEPTION_NOT_HANDLED) が発生します。 公開情報へ追加リクエスト中の内容となりますが、下記についても除外を設定しないようお願いいたします。 C:\\Windows\\WinSXS フォルダー Winodws 10 Enterprise 2019 LTSC では、C:\\Windows\\WinSXS フォルダーを除外するとシステム起動時に 「SYSTEM THREAD EXCEPTION NOT HANDLED」 で BSOD が発生するという報告がございます。C:\\Windows\\WinSXS フォルダー配下にはシステム起動初期にアクセスする情報が含まれておりますため、除外をお勧めいたしません。 Windows Defender 用の除外設定について弊社より提供させていただいておりますマルウェア対策ソフトウェア (Windows Defender および System Center Endpoint Protection) につきましては、除外設定を下記サイトにて公開しております。 UWF で保護されているデバイスでマルウェア対策のサポート また、これらの除外設定に伴い発生する問題の事例をご紹介します。比較的新しいバージョンの OS (Windows 10 バージョン 1909 以降) におきましては、2020/6/17 現在にて発生報告は確認されておりません。関連すると思われる問題が確認された場合には、Windows Defender 製品サポートへお問い合わせください。 Windows Defender のレジストリを除外すると OS 起動時にハングアップする 下記レジストリ キーを除外していると、OS 起動時にハングアップして起動できない場合があります。レースコンディションによるものであり、スペックの低い端末で発生する傾向にあります。OS 側での修正は困難であるため、Wdfilter の除外解除等をご検討ください。 HKLM\\System\\CurrentControlSet\\Services\\WdFilter HKLM\\SYSTEM\\ControlSet001\\Control\\DeviceClasses{53f5630d-b6bf-11d0-94f2-00a0c91efb8b} Windows 10 Enterprise 2016 LTSB の環境では下記除外が入っていた場合にも同様の問題が発生するという報告があります。該当する場合にはこちらの除外解除もご検討ください。 HKLM\\SOFTWARE\\Classes\\TypeLib{8C389764-F036-48F2-9AE2-88C260DCF43B} HKLM\\SOFTWARE\\Classes\\CLSID{A2D75874-6750-4931-94C1-C99D3BC9D0C7} HKLM\\SOFTWARE\\Classes\\CLSID{195B4D07-3DE2-4744-BBF2-D90121AE785B} 変更履歴2020/02/19 created by Mochizuki2020/06/16 modified by Mochizuki","categories":[{"name":"Unified Write Filter","slug":"Unified-Write-Filter","permalink":"https://jpiotblog.github.io/categories/Unified-Write-Filter/"}],"tags":[{"name":"除外設定","slug":"除外設定","permalink":"https://jpiotblog.github.io/tags/%E9%99%A4%E5%A4%96%E8%A8%AD%E5%AE%9A/"}]},{"title":"UWF を有効化した環境でメモリ ダンプを取得する方法","slug":"UWF-dump-setting","date":"2020-02-11T15:00:00.000Z","updated":"2020-08-21T08:22:39.394Z","comments":true,"path":"2020/02/12/UWF-dump-setting/","link":"","permalink":"https://jpiotblog.github.io/2020/02/12/UWF-dump-setting/","excerpt":"UWF を有効化した環境で、メモリ ダンプを取得する方法についてご紹介します。","text":"UWF を有効化した環境で、メモリ ダンプを取得する方法についてご紹介します。 はじめに 概要 強制メモリ ダンプを取得することで、現象発生時のメモリの状態を Memory.dmp ファイルとして保存し、そこから現象発生時のオペレーティング システムのメモリの状態や、行われていた処理などの詳細を確認することができます。 影響 メモリ ダンプ取得のためのシャットダウン操作は、正常にシステムを停止させる方法ではないことを予めご留意ください。システムが正常に動作しない問題の調査方法として、他に方法が無い場合にご案内させていただいております。運用環境で、且つ回避策がある場合には、極力実施をお勧めいたしません。 再起動の必要性 事前準備時、メモリダンプ採取時に再起動が必要です。 採取ファイル 本手順では “D:\\Dumps\\Memory.dmp” として進めさせていただきます。 事前準備 システム ドライブ以外に、メモリ ダンプを保存するボリュームを追加し、いずれかのドライブとしてマウントします。※ この手順では D: ドライブとします。 事前に UWF フィルターとボリュームの保護を実行します。この過程で PageFile の設定が一旦初期化されます。 実行例: ※ この手順ではシステム ドライブを C: ドライブとします。 123uwfmgr.exe volume protect c: uwfmgr.exe filter enable shutdown -r -t 0 Dump 出力設定手順 UWF フィルターを無効化する。 実行例: 1uwfmgr.exe filter disable PageFile の大きさを 物理メモリ + 300 Mbyte 以上の大きさに設定する。 実行例:a) [エクスプローラ] - [コンピュータ] を右クリックし [プロパティ(R)] をクリックします。b) [システムの詳細設定] をクリックします。c) [詳細設定] タブの [パフォーマンス] にある [設定(S)] をクリックします。d) [詳細設定] タブの [仮想メモリ] の項目にある [変更(C)] ボタンをクリックします。e) この画面にて、[すべてのドライブのページング ファイルのサイズを自動的に管理する(A)] オプションを外します。f) 手順 1) で作成したシステムドライブ以外のドライブ (ここでは D:) をクリックします。g) [カスタムサイズ] にチェックを付け、[初期サイズ]、[最大サイズ] の両方に物理メモリ + 300 Mbyte 以上の値を入力します。 (例えば 4096MB メモリの場合、4396MB)h) その後 [設定] ボタンをクリックし設定を反映させ [OK] ボタンをクリックします。i) “変更結果はコンピューターを再起動しなければ有効になりません。” というポップアップが表示されますので、[OK] ボタンをクリックします。j) “パフォーマンス オプション” のウィンドウも [OK] ボタンにて閉じます。 ※ 補足この設定値は、次のレジストリに反映されます。なお、直接レジストリ値を編集することでも、ページング ファイル サイズを設定することができます。 キー: HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Memory Management名前: PagingFiles種類: REG_MULTI_SZデータ: &lt;ページ ファイル保存先&gt; &lt;初期サイズ (MB)&gt; &lt;最大サイズ (MB)&gt; (設定例: d:\\pagefile.sys 4396 4396) 完全メモリ ダンプ (Full Dump) が生成されるよう設定する。 a) [エクスプローラ] - [コンピュータ] を右クリックし、[プロパティ] をクリックします。b) 左ペインにある [システムの詳細設定] をクリックします。c) “システムのプロパティ” の [詳細設定] タブの [起動と回復] 枠内にある [設定] ボタンをクリックします。d) “起動と回復” の [デバッグ情報の書き込み] 枠内にあるプルダウン メニューから [完全メモリ ダンプ] を選択し、[OK] ボタンを 2 回クリックします。 [ダンプ ファイル] のパスを変更する。 ※ 注意GUI から [完全メモリ ダンプ] を選択する事と併せて、以下のレジストリ エディタで、次のレジストリの値が設定されている事をご確認ください。 キー: HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl名前: CrashDumpEnabled種類: REG_DWORDデータ: 1 メモリ ダンプの出力先は、次のレジストリ値で確認できます。 キー: HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl名前: DumpFile種類: REG_EXPAND_SZデータ(既定値): D:\\Dumps\\MEMORY.DMP DedicatedDumpFile.sys を設定する。 レジストリ エディタで、次のレジストリの値を設定してください。 キー: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl名前: DedicatedDumpFile種類: REG_SZデータ: D:\\dedicateddumpfile.sys キー: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl名前: DumpFileSize種類: REG_DWORDデータ: &lt;10 進数でメモリサイズ + 300 MB を設定ください&gt; (設定例: 4396) (オプション) AlwaysKeepMemoryDump を設定する。 Client OS におけるメモリ ダンプでは WorkGroup 環境の場合、ダンプ ファイル格納ボリュームの空き容量が25 GB 未満の場合、ダンプ ファイルが削除される動作となります (Domain 環境の場合、25 GB の制限には合致いたしません)。そのため、対象の端末が Workgroup 環境の場合には、以下のレジストリ値を設定いただき、ダンプ ファイルが上記制限に合致しないよう設定いただく事をご検討いただければと存じます。 キー: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl名前: AlwaysKeepMemoryDump種類: REG_DWODデータ : 1 公開情報:Kernel dump storage and clean up behavior in Windows 7 (オプション) キーボードから STOP エラーを発生できるように設定する。 事象発生時にメモリ ダンプの生成を行えるよう、トリガーの設定を行います。レジストリ エディタで、次のレジストリの値を設定してください。 &lt;PS/2 キーボードの場合&gt;キー: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\i8042prt\\Parameters名前: CrashOnCtrlScroll種類: REG_DWORDデータ: 1 &lt;USB キーボードの場合&gt;キー: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\kbdhid\\Parameters名前: CrashOnCtrlScroll種類: REG_DWORDデータ: 1 (オプション) NMI スイッチを使用できるように設定する。 Windows の機能ではなく、ご使用のハードウェアにメモリ ダンプ取得のための NMI (Non-Maskable Interrupt) スイッチが備わっている場合、以下にご案内するキーボードでクラッシュさせる方法よりも割り込みレベルが高いため、ご使用いただくことをお勧めします。ご使用のハードウェアに当該機能が備わっているか、また、使用方法につきましては、ハードウェアの取扱説明書、あるいはハードウェアご提供元様にご確認ください。 また、Windows 側の設定として、レジストリ エディタで、次のレジストリの値を設定ください。 キー: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl名前: NMICrashDump種類: REG_DWORDデータ: 1 UWF を有効化し、OS を再起動する。 実行例: 12uwfmgr.exe filter enable shutdown -r -t 0 Dump の出力手順調査対象の事象が発生した際に、NMI もしくはキーボード操作によってメモリ ダンプを出力させます。 取得対象: D:\\Dumps\\Memory.dmp ※ 参考情報 Windows Server 2008 および Windows Server 2008 R2 でカーネルまたは完全メモリ ダンプ ファイルを生成する方法 Overview of memory dump file options for Windows 2000, Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7 and Windows Server 2008 R2 メモリ ダンプ ファイルのオプションは、Windows 2000、Windows XP、Windows Server 2003、Windows Vista、Windows Server 2008、Windows 7 と Windows サーバー 2008 R2 の概要 (機械翻訳) Windows 8 and Windows Server 2012: Automatic Memory Dump (英文のみ) NMI_HARDWARE_FAILURE error when an NMI is triggered on Windows 8 and Windows Server 2012 (英文のみ) Windows の機能により、キーボード操作で Memory.dmp ファイルを作成できる クラッシュ後 Windows でメモリ ダンプ ファイルが保存されない","categories":[{"name":"Unified Write Filter","slug":"Unified-Write-Filter","permalink":"https://jpiotblog.github.io/categories/Unified-Write-Filter/"}],"tags":[{"name":"メモリ ダンプの設定手順","slug":"メモリ-ダンプの設定手順","permalink":"https://jpiotblog.github.io/tags/%E3%83%A1%E3%83%A2%E3%83%AA-%E3%83%80%E3%83%B3%E3%83%97%E3%81%AE%E8%A8%AD%E5%AE%9A%E6%89%8B%E9%A0%86/"}]},{"title":"UWF 関連トラブル時の情報採取手順について","slug":"CollectInfo_UWF","date":"2020-01-25T15:00:00.000Z","updated":"2020-08-21T08:22:39.375Z","comments":true,"path":"2020/01/26/CollectInfo_UWF/","link":"","permalink":"https://jpiotblog.github.io/2020/01/26/CollectInfo_UWF/","excerpt":"トラブル発生時の情報採取手順を記載します。","text":"トラブル発生時の情報採取手順を記載します。 対象事象発生マシン (OS: Windows 10 Enterprise または Windows 10 IoT Core, Windows 10 IoT Enterprise) 事前準備こちら から CollectInfo_UWF.txt ファイルをダウンロードし、拡張子を .txt から .bat に変更、実施対象の任意の場所に格納します。 &lt;実施対象に以下が存在する状態&gt;・ [任意の場所]\\CollectInfo_UWF.bat ファイル 影響ログを採取することで負荷が上がる可能性は考えられますが、基本的に OS リソースや処理への影響はありません。 実行手順(1) 事象発生マシンに管理者アカウントでログオンします。(2) CollectInfo_UWF.bat ファイルを右クリックし、[管理者として実行] を選択します。(3) “実行したい番号を入力ください” メッセージに 1 を入力、リターン キーを押下し、表示に従いメニューに戻ります。(4) “実行したい番号を入力ください” メッセージに q を入力、リターン キーを押下してツールを終了します。(5) デスクトップ上 &lt;YYYYMMDD 形式の年月日&gt;_&lt;ホスト名&gt;_info フォルダーを圧縮し、お問い合わせいただく際にご提供ください。","categories":[{"name":"Unified Write Filter","slug":"Unified-Write-Filter","permalink":"https://jpiotblog.github.io/categories/Unified-Write-Filter/"}],"tags":[{"name":"情報採取手順","slug":"情報採取手順","permalink":"https://jpiotblog.github.io/tags/%E6%83%85%E5%A0%B1%E6%8E%A1%E5%8F%96%E6%89%8B%E9%A0%86/"}]},{"title":"FAQ (Unified Write Filter)","slug":"UWF-FAQ","date":"2020-01-15T15:00:00.000Z","updated":"2020-08-21T08:22:39.417Z","comments":true,"path":"2020/01/16/UWF-FAQ/","link":"","permalink":"https://jpiotblog.github.io/2020/01/16/UWF-FAQ/","excerpt":"UWF 機能に関してよくあるご質問とその回答をまとめております。","text":"UWF 機能に関してよくあるご質問とその回答をまとめております。 製品を理解するために参考となる公開情報を教えて欲しい回答 統合書き込みフィルター (UWF) 機能 機能の概要、要件、制限事項、各機能の紹介など Unified Write Filter (UWF) 機能を使用します。 UWF の有効化方法 統合書き込みフィルター (UWF) オーバーレイの位置とサイズ オーバーレイに関する情報 書き込みフィルターの除外 UWF 機能の除外設定について UWF で保護されているデバイスのサービス UWF を有効化している環境で Windows 更新プロブラムやマルウェア対策ソフトのシグネチャを更新する方法について Unified Write Filter (UWF) のトラブルシューティング トラブルシューティングに関する情報UWF に関する情報採取手順は、こちら を参照ください。 Windows Update 時に CPU が高くならないようにしたい回答 WmiPrvSE.exe プロセスが uwfwmi.dll にて UWF のオーバーレイ ファイルを取得する処理に CPU を消費する傾向があります。こちらは仕様に基づく動作となります。 “UWF Servicing Mode” 実行時に WSUS の設定が参照されないのは不具合か回答 UWF の不具合として、2019 年 9 月 (Windows 10 1903 のみ 2019 年 10 月) の更新プログラムで修正しております。 フィルター有効化時にページファイル (Pagefile.sys) が削除されないようにしたい回答 初回の uwfmgr.exe filter enable コマンドの実行時に Pagefile に関するレジストリ値を操作する処理が実施される為です。回避策としては、uwfmgr.exe filter enable コマンドを実行した後、再起動の直前にもう一度 Pagefile.sys の設定を保護対象外のボリュームに対して実施する必要があります。 UWF を有効化して利用開始する際のベストプラクティスについて回答 以下の実施についてご留意ください。 UWF には複数の既知の不具合が存在します。Windows Update を最新まで適用してご利用を開始ください。 除外設定によりシステム上同期を取る必要がある情報に矛盾が生じ、何らかの問題を発生させる可能性がございます。以下サイトの情報を参考に、除外設定をの実施をご検討ください。 UWF の除外設定について OS 再起動を定期的に行わないシステムの場合、UWF のオーバーレイ領域の不足によって問題が発生する可能性があります。以下サイトの情報を参考に、オーバーレイの設定をご検討ください。 長期間稼働するシステムでの UWF 有効化について ※ 適宜追加更新します。","categories":[{"name":"Unified Write Filter","slug":"Unified-Write-Filter","permalink":"https://jpiotblog.github.io/categories/Unified-Write-Filter/"}],"tags":[{"name":"FAQ","slug":"FAQ","permalink":"https://jpiotblog.github.io/tags/FAQ/"}]},{"title":"過去ブログについて","slug":"past-blog","date":"2020-01-11T15:00:00.000Z","updated":"2020-08-21T08:22:39.379Z","comments":true,"path":"2020/01/12/past-blog/","link":"","permalink":"https://jpiotblog.github.io/2020/01/12/past-blog/","excerpt":"過去のブログ情報を紹介いたします。定期的な更新は行われていないため、除外設定等の情報は現在の OS では適用されない場合がございます。恐れ入りますが、予めご留意いただけますようお願い申し上げます。","text":"過去のブログ情報を紹介いたします。定期的な更新は行われていないため、除外設定等の情報は現在の OS では適用されない場合がございます。恐れ入りますが、予めご留意いただけますようお願い申し上げます。 UWF 統合書き込みフィルター (Unified Write Filter (UWF)) について Windows 10 で UWF (Unified Write Filter) とグループ ポリシーによるデバイスのインストール制限を併用する場合の動作について Unified Write Filter (UWF) 環境での運用を考慮した設定について UWF 無効化コマンドが失敗する UWF 有効にしてから 6 ヶ月経過すると一部の通知アイコンが表示されない現象について 統合書き込みフィルター (Unified Write Filter (UWF)) について UWFMGR.EXE コマンド実行時の文字数制限について Windows 10 の統合書き込みフィルター機能 (UWF) で、フィルターの除外設定を行ってもオーバーレイのメモリを消費してしまう","categories":[{"name":"IoT 製品全般","slug":"IoT-製品全般","permalink":"https://jpiotblog.github.io/categories/IoT-%E8%A3%BD%E5%93%81%E5%85%A8%E8%88%AC/"}],"tags":[{"name":"過去ブログ","slug":"過去ブログ","permalink":"https://jpiotblog.github.io/tags/%E9%81%8E%E5%8E%BB%E3%83%96%E3%83%AD%E3%82%B0/"}]},{"title":"jpiotblog について","slug":"about-jpiotblog","date":"2019-12-31T15:00:00.000Z","updated":"2020-08-21T08:22:39.337Z","comments":true,"path":"2020/01/01/about-jpiotblog/","link":"","permalink":"https://jpiotblog.github.io/2020/01/01/about-jpiotblog/","excerpt":"","text":"日本マイクロソフトの IoT 製品 (Device Lockdown 機能含む) に関するサポート情報のブログです。 公開日2020 年 1 月 1 日より公開いたしました。 活動について製品のサポート メンバーによって運用されております。仕様に関する情報やトラブル シューティングの手順、実装におけるワンポイント アドバイスを公開いたします。 留意事項サイトのコンテンツや情報において、可能な限り正確な情報を掲載し、更新するよう努めております。しかしながら、状況の変化や情報が古くなることにより、必ずしもお客様環境に適用できない情報となる場合がございます。恐れ入りますが、予めご留意くださいますようお願い申し上げます。","categories":[{"name":"IoT 製品全般","slug":"IoT-製品全般","permalink":"https://jpiotblog.github.io/categories/IoT-%E8%A3%BD%E5%93%81%E5%85%A8%E8%88%AC/"}],"tags":[{"name":"はじめに","slug":"はじめに","permalink":"https://jpiotblog.github.io/tags/%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB/"}]}]}